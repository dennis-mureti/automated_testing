{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import Login from \"./Login\";\n// import {\n//   assertTodoExists,\n//   assertTodoCompleted,\n//   assertTodoDeleted,\n//   assertTodoUpdated,\n// } from \"./utils/assertions\";\n\n// function App() {\n//   const [todos, setTodos] = useState([]);\n//   const [inputValue, setInputValue] = useState(\"\");\n//   const [editIndex, setEditIndex] = useState(null);\n//   const [token, setToken] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n//   const [assertion, setAssertion] = useState(null);\n\n//   // Fetch todos from API\n//   const fetchTodos = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3001/items\", {\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//         },\n//       });\n//       const data = await response.json();\n//       setTodos(data);\n//       // Clear any previous assertions\n//       setAssertion(null);\n//     } catch (err) {\n//       setError(\"Failed to fetch todos\");\n//     }\n//   };\n\n//   // Handle login\n//   const handleLogin = (newToken) => {\n//     setToken(newToken);\n//     fetchTodos();\n//   };\n\n//   // Handle logout\n//   const handleLogout = () => {\n//     setToken(\"\");\n//     setTodos([]);\n//     setInputValue(\"\");\n//     setEditIndex(null);\n//   };\n\n//   // Handle add/edit todo with assertion\n//   const handleAddTodo = async () => {\n//     if (!inputValue.trim()) return;\n\n//     try {\n//       if (editIndex !== null) {\n//         // Update existing todo\n//         await fetch(`http://localhost:3001/items/${todos[editIndex].id}`, {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${token}`,\n//           },\n//           body: JSON.stringify({ title: inputValue, completed: false }),\n//         });\n//         setAssertion(\n//           assertTodoUpdated(todos, todos[editIndex].title, inputValue)\n//         );\n//       } else {\n//         // Create new todo\n//         await fetch(\"http://localhost:3001/items\", {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${token}`,\n//           },\n//           body: JSON.stringify({ title: inputValue, completed: false }),\n//         });\n//         setAssertion(assertTodoExists(todos, inputValue));\n//       }\n\n//       setInputValue(\"\");\n//       setEditIndex(null);\n//       await fetchTodos();\n//     } catch (err) {\n//       setError(\"Failed to save todo\");\n//     }\n//   };\n\n//   // Handle delete todo with assertion\n//   const handleDeleteTodo = async (todoId) => {\n//     try {\n//       await fetch(`http://localhost:3001/items/${todoId}`, {\n//         method: \"DELETE\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//         },\n//       });\n//       await fetchTodos();\n//       setAssertion(\n//         assertTodoDeleted(todos, todos.find((t) => t.id === todoId).title)\n//       );\n//     } catch (err) {\n//       setError(\"Failed to delete todo\");\n//     }\n//   };\n\n//   // Handle toggle todo with assertion\n//   const handleToggleTodo = async (todoId) => {\n//     try {\n//       const todo = todos.find((t) => t.id === todoId);\n//       await fetch(`http://localhost:3001/items/${todoId}`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${token}`,\n//         },\n//         body: JSON.stringify({ title: todo.title, completed: !todo.completed }),\n//       });\n//       await fetchTodos();\n//       setAssertion(\n//         todo.completed\n//           ? assertTodoCompleted(todos, todo.title)\n//           : assertTodoExists(todos, todo.title)\n//       );\n//     } catch (err) {\n//       setError(\"Failed to update todo status\");\n//     }\n//   };\n\n//   // Handle edit todo\n//   const handleEditTodo = (todo) => {\n//     setInputValue(todo.title);\n//     setEditIndex(todos.findIndex((t) => t.id === todo.id));\n//   };\n\n//   // Add assertion display component\n//   const AssertionMessage = () => {\n//     if (!assertion) return null;\n//     return (\n//       <div\n//         className={`assertion-message ${\n//           assertion ? \"assertion-error\" : \"assertion-success\"\n//         }`}\n//       >\n//         {assertion}\n//       </div>\n//     );\n//   };\n\n//   // Fetch todos when token changes\n//   useEffect(() => {\n//     if (token) {\n//       fetchTodos();\n//     }\n//   }, [token]);\n\n//   // Show login if not authenticated\n//   if (!token) {\n//     return <Login onLogin={handleLogin} />;\n//   }\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"header\">\n//         <h1>Todo App</h1>\n//         <button className=\"logout-button\" onClick={handleLogout}>\n//           Logout\n//         </button>\n//       </div>\n\n//       {error && <div className=\"error-message\">{error}</div>}\n//       <AssertionMessage />\n\n//       <div className=\"todo-container\">\n//         <div className=\"todo-input-container\">\n//           <input\n//             type=\"text\"\n//             placeholder={\n//               editIndex !== null ? \"Edit task...\" : \"Add a new task...\"\n//             }\n//             className=\"todo-input\"\n//             value={inputValue}\n//             onChange={(e) => setInputValue(e.target.value)}\n//           />\n//           <button className=\"todo-button\" onClick={handleAddTodo}>\n//             {editIndex !== null ? \"Save\" : \"Add\"}\n//           </button>\n//         </div>\n//         <div className=\"todo-list\">\n//           {todos.map((todo) => (\n//             <div key={todo.id} className=\"todo-item\">\n//               <input\n//                 type=\"checkbox\"\n//                 checked={todo.completed}\n//                 onChange={() => handleToggleTodo(todo.id)}\n//               />\n//               <span\n//                 className={`todo-text ${todo.completed ? \"completed\" : \"\"}`}\n//               >\n//                 {todo.title}\n//               </span>\n//               <div className=\"todo-actions\">\n//                 <button\n//                   className=\"todo-edit\"\n//                   onClick={() => handleEditTodo(todo)}\n//                 >\n//                   ✎\n//                 </button>\n//                 <button\n//                   className=\"todo-delete\"\n//                   onClick={() => handleDeleteTodo(todo.id)}\n//                 >\n//                   ✕\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/dennismureti/Downloads/todo-app/frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import Login from \"./Login\";\n// import {\n//   assertTodoExists,\n//   assertTodoCompleted,\n//   assertTodoDeleted,\n//   assertTodoUpdated,\n// } from \"./utils/assertions\";\n\n// function App() {\n//   const [todos, setTodos] = useState([]);\n//   const [inputValue, setInputValue] = useState(\"\");\n//   const [editIndex, setEditIndex] = useState(null);\n//   const [token, setToken] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n//   const [assertion, setAssertion] = useState(null);\n\n//   // Fetch todos from API\n//   const fetchTodos = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3001/items\", {\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//         },\n//       });\n//       const data = await response.json();\n//       setTodos(data);\n//       // Clear any previous assertions\n//       setAssertion(null);\n//     } catch (err) {\n//       setError(\"Failed to fetch todos\");\n//     }\n//   };\n\n//   // Handle login\n//   const handleLogin = (newToken) => {\n//     setToken(newToken);\n//     fetchTodos();\n//   };\n\n//   // Handle logout\n//   const handleLogout = () => {\n//     setToken(\"\");\n//     setTodos([]);\n//     setInputValue(\"\");\n//     setEditIndex(null);\n//   };\n\n//   // Handle add/edit todo with assertion\n//   const handleAddTodo = async () => {\n//     if (!inputValue.trim()) return;\n\n//     try {\n//       if (editIndex !== null) {\n//         // Update existing todo\n//         await fetch(`http://localhost:3001/items/${todos[editIndex].id}`, {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${token}`,\n//           },\n//           body: JSON.stringify({ title: inputValue, completed: false }),\n//         });\n//         setAssertion(\n//           assertTodoUpdated(todos, todos[editIndex].title, inputValue)\n//         );\n//       } else {\n//         // Create new todo\n//         await fetch(\"http://localhost:3001/items\", {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${token}`,\n//           },\n//           body: JSON.stringify({ title: inputValue, completed: false }),\n//         });\n//         setAssertion(assertTodoExists(todos, inputValue));\n//       }\n\n//       setInputValue(\"\");\n//       setEditIndex(null);\n//       await fetchTodos();\n//     } catch (err) {\n//       setError(\"Failed to save todo\");\n//     }\n//   };\n\n//   // Handle delete todo with assertion\n//   const handleDeleteTodo = async (todoId) => {\n//     try {\n//       await fetch(`http://localhost:3001/items/${todoId}`, {\n//         method: \"DELETE\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//         },\n//       });\n//       await fetchTodos();\n//       setAssertion(\n//         assertTodoDeleted(todos, todos.find((t) => t.id === todoId).title)\n//       );\n//     } catch (err) {\n//       setError(\"Failed to delete todo\");\n//     }\n//   };\n\n//   // Handle toggle todo with assertion\n//   const handleToggleTodo = async (todoId) => {\n//     try {\n//       const todo = todos.find((t) => t.id === todoId);\n//       await fetch(`http://localhost:3001/items/${todoId}`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${token}`,\n//         },\n//         body: JSON.stringify({ title: todo.title, completed: !todo.completed }),\n//       });\n//       await fetchTodos();\n//       setAssertion(\n//         todo.completed\n//           ? assertTodoCompleted(todos, todo.title)\n//           : assertTodoExists(todos, todo.title)\n//       );\n//     } catch (err) {\n//       setError(\"Failed to update todo status\");\n//     }\n//   };\n\n//   // Handle edit todo\n//   const handleEditTodo = (todo) => {\n//     setInputValue(todo.title);\n//     setEditIndex(todos.findIndex((t) => t.id === todo.id));\n//   };\n\n//   // Add assertion display component\n//   const AssertionMessage = () => {\n//     if (!assertion) return null;\n//     return (\n//       <div\n//         className={`assertion-message ${\n//           assertion ? \"assertion-error\" : \"assertion-success\"\n//         }`}\n//       >\n//         {assertion}\n//       </div>\n//     );\n//   };\n\n//   // Fetch todos when token changes\n//   useEffect(() => {\n//     if (token) {\n//       fetchTodos();\n//     }\n//   }, [token]);\n\n//   // Show login if not authenticated\n//   if (!token) {\n//     return <Login onLogin={handleLogin} />;\n//   }\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"header\">\n//         <h1>Todo App</h1>\n//         <button className=\"logout-button\" onClick={handleLogout}>\n//           Logout\n//         </button>\n//       </div>\n\n//       {error && <div className=\"error-message\">{error}</div>}\n//       <AssertionMessage />\n\n//       <div className=\"todo-container\">\n//         <div className=\"todo-input-container\">\n//           <input\n//             type=\"text\"\n//             placeholder={\n//               editIndex !== null ? \"Edit task...\" : \"Add a new task...\"\n//             }\n//             className=\"todo-input\"\n//             value={inputValue}\n//             onChange={(e) => setInputValue(e.target.value)}\n//           />\n//           <button className=\"todo-button\" onClick={handleAddTodo}>\n//             {editIndex !== null ? \"Save\" : \"Add\"}\n//           </button>\n//         </div>\n//         <div className=\"todo-list\">\n//           {todos.map((todo) => (\n//             <div key={todo.id} className=\"todo-item\">\n//               <input\n//                 type=\"checkbox\"\n//                 checked={todo.completed}\n//                 onChange={() => handleToggleTodo(todo.id)}\n//               />\n//               <span\n//                 className={`todo-text ${todo.completed ? \"completed\" : \"\"}`}\n//               >\n//                 {todo.title}\n//               </span>\n//               <div className=\"todo-actions\">\n//                 <button\n//                   className=\"todo-edit\"\n//                   onClick={() => handleEditTodo(todo)}\n//                 >\n//                   ✎\n//                 </button>\n//                 <button\n//                   className=\"todo-delete\"\n//                   onClick={() => handleDeleteTodo(todo.id)}\n//                 >\n//                   ✕\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}